@page "/marks/edit/{id:int}"
@rendermode InteractiveServer
@using WebApp.Data.BLL
@using WebApp.Data.Models
@inject GradingServices DB
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Mark for <u>@Evaluation?.Name</u> in <i>@Evaluation?.Course.Name</i></h4>
<hr />
@if (Evaluation is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm method="post" Model="Evaluation" OnValidSubmit="UpdateMark" FormName="edit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <input type="hidden" id="title" @bind="Evaluation.EvaluationItemId" />
        <input type="hidden" id="title" @bind="Evaluation.CourseId" />
        <fieldset class="grid">
            <label>Name
                <InputText disabled id="title" @bind-Value="Evaluation.Name" />
            </label>
            <label>Weight
                <InputNumber disabled id="title" @bind-Value="Evaluation.Weight" />
            </label>
        </fieldset>
        <fieldset class="grid">
            <label>Possible
                <InputNumber id="title" @bind-Value="Evaluation.PossibleMarks" autofocus />
            </label>
            <label>Earned
                <InputNumber id="title" @bind-Value="Evaluation.EarnedMarks" />
            </label>
        </fieldset>
        <fieldset class="grid">
            <button type="submit">Save</button>
            <button type="button" @onclick="ClearMarks">Clear</button>
        </fieldset>
    </EditForm>
    <text>@UserFeedback</text>
}

<div>
    <a href="marks">Back to List</a>
</div>

@code {
    public static string Url(EvaluationItem movie) =>
        $"marks/edit/{Uri.EscapeDataString(movie.EvaluationItemId.ToString())}";

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public EvaluationItem? Evaluation { get; set; }
    public Course? Course { get; set; }

    private string UserFeedback { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        Evaluation ??= DB.GetEvaluationItem(Id);

        if (Evaluation is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public void UpdateMark()
    {
        try
        {
            DB.UpdateMark(Evaluation!);
            UserFeedback = $"Mark updated successfully! You got {Evaluation!.EarnedMarks} out of {Evaluation.PossibleMarks} for a mark of {Evaluation.Percentage}%!";
        }
        catch (Exception ex)
        {
            UserFeedback = $"Error: {ex.Message}";
        }
    }

    private void ClearMarks()
    {
        Evaluation!.EarnedMarks = null;
        Evaluation!.PossibleMarks = null;
        UserFeedback = "Marks cleared!";
    }
}
