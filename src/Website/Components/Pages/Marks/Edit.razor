@page "/marks/edit/{id:int}"
@using WebApp.Data.DAL
@using WebApp.Data.Models
@using Microsoft.EntityFrameworkCore
@inject MyMarksContext DB
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Movie</h4>
<hr />
@if (Evaluation is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Evaluation" OnValidSubmit="UpdateMark" FormName="edit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @* <input type="hidden" name="Movie.Id" value="@Movie.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="Movie.Title" class="form-control" />
                    <ValidationMessage For="() => Movie.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="release-date" class="form-label">Release date:</label>
                    <InputDate id="release-date" @bind-Value="Movie.ReleaseDate" class="form-control" />
                    <ValidationMessage For="() => Movie.ReleaseDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputText id="genre" @bind-Value="Movie.Genre" class="form-control" />
                    <ValidationMessage For="() => Movie.Genre" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="Movie.Price" min="0" step="0.01" class="form-control" />
                    <ValidationMessage For="() => Movie.Price" class="text-danger" />
                </div> *@
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="marks">Back to List</a>
</div>

@code {
    public static string Url(EvaluationItem movie) =>
        $"marks/edit/{Uri.EscapeDataString(movie.EvaluationItemId.ToString())}";

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public EvaluationItem? Evaluation { get; set; }

    protected override void OnInitialized()
    {
        Evaluation ??= DB.EvaluationItems.FirstOrDefault(m => m.EvaluationItemId == Id);

        if (Evaluation is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public void UpdateMark()
    {
        DB.Attach(Evaluation!).State = EntityState.Modified;

        try
        {
            DB.SaveChanges();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MovieExists(Evaluation!.EvaluationItemId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("marks");
    }

    bool MovieExists(int id)
    {
        return DB.EvaluationItems.Any(e => e.EvaluationItemId == id);
    }
}
